# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: CS301 Todo API

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  getAllTasksByUserIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/getAllTasksByUserId.getAllItemsByUserIdHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get all tasks in DynamoDB
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTasks
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTasks
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tasks/{userId}
            Method: GET

  putTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/putTask.createTaskHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Add one task to a DynamoDB table.
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTasks
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTasks
      Events:
        Api:
          Type: Api
          Properties:
            Path: /task
            Method: POST

  deleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/deleteTask.deleteTaskHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Delete task from a DynamoDB table.
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTasks
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTasks
      Events:
        Api:
          Type: Api
          Properties:
            Path: /task
            Method: DELETE

  getTaskByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/getTaskById.getByIdHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get task by id in DynamoDB
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTasks
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTasks
      Events:
        Api:
          Type: Api
          Properties:
            Path: /task/{id}
            Method: GET

  TodoTaskGroups:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: todo-task-groups
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  TodoTasks:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: todo-tasks
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
